// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã
function calculatePrice() {
    // --- –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º—ã ---
    const gameType = determineGameType(lastSelectedGame) || 'indie';
    const gameLength = parseInt(document.getElementById('game-length').value);
    const gamePrice = parseFloat(document.getElementById('game-price').value) || 0;
    
    let breakdown = [];
    
    // --- –®–∞–≥ 2: –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –£–°–õ–£–ì–ò (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ) ---
    let hourlyRate = 0;
    if (gameType === 'horror') { hourlyRate = 200; breakdown.push(`–•–æ—Ä—Ä–æ—Ä: 200 ‚ÇΩ/—á–∞—Å`); }
    else if (gameType === 'competitive') { hourlyRate = 130; breakdown.push(`–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è: 130 ‚ÇΩ/—á–∞—Å`); }
    else {
        switch(gameType) {
            case 'indie': hourlyRate = 160; breakdown.push(`–ò–Ω–¥–∏: 160 ‚ÇΩ/—á–∞—Å`); break;
            case 'aa': hourlyRate = 170; breakdown.push(`AA-–∏–≥—Ä–∞: 170 ‚ÇΩ/—á–∞—Å`); break;
            case 'aaa': hourlyRate = 180; breakdown.push(`AAA-–∏–≥—Ä–∞: 180 ‚ÇΩ/—á–∞—Å`); break;
        }
    }
    
    // –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
    let servicePrice = hourlyRate * gameLength;
    breakdown.push(`–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${gameLength} —á`);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫–∏ –∏ –Ω–∞—Ü–µ–Ω–∫–∏ –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –†–ê–ë–û–¢–´
    let discount = 0;
    if (gameLength > 48) { discount = 0.2; breakdown.push(`–°–∫–∏–¥–∫–∞: 20% (–¥–ª—è –∏–≥—Ä > 48 —á–∞—Å–æ–≤)`); }
    else if (gameLength > 24) { discount = 0.1; breakdown.push(`–°–∫–∏–¥–∫–∞: 10% (–¥–ª—è –∏–≥—Ä > 24 —á–∞—Å–æ–≤)`); }
    
    if (discount > 0) {
        const discountAmount = servicePrice * discount;
        servicePrice -= discountAmount;
        breakdown.push(`–°—É–º–º–∞ —Å–∫–∏–¥–∫–∏: ${Math.round(discountAmount)} ‚ÇΩ`);
    }
    
    let ratingIncrease = 0;
    if (lastSelectedGame && typeof lastSelectedGame.rating === 'number') {
        const rawgRating = lastSelectedGame.rating;
        if (rawgRating < 2.8) { ratingIncrease = 0.15; breakdown.push('–ù–∏–∑–∫–∞—è –æ—Ü–µ–Ω–∫–∞ (< 2.8): +15%'); }
        else if (rawgRating < 3.5) { ratingIncrease = 0.05; breakdown.push('–ù–∏–∑–∫–∞—è –æ—Ü–µ–Ω–∫–∞ (< 3.5): +5%'); }
    }
    if (ratingIncrease > 0) {
        const increaseAmount = Math.round(servicePrice * ratingIncrease);
        servicePrice += increaseAmount;
        breakdown.push(`–°—É–º–º–∞ –Ω–∞–¥–±–∞–≤–∫–∏: ${increaseAmount} ‚ÇΩ`);
    }

    // --- –®–∞–≥ 3: !!! –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–ò–ë–ê–í–õ–Ø–ï–ú –°–¢–û–ò–ú–û–°–¢–¨ –ò–ì–†–´ !!! ---
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã –≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
    if (gamePrice > 0) {
        breakdown.push(`<b>–ü–ª—é—Å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã: ${gamePrice} ‚ÇΩ</b> (–ï—Å–ª–∏ —É –º–µ–Ω—è –µ–µ –Ω–µ—Ç)`);
    }
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ = –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ + –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã
    let finalPrice = servicePrice + gamePrice;

    // –û–∫—Ä—É–≥–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    finalPrice = Math.ceil(finalPrice / 10) * 10;

    // --- –®–∞–≥ 4: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
    breakdown.push(`<b>–ò—Ç–æ–≥–æ: ${finalPrice} ‚ÇΩ</b>`);
    
    const resultElement = document.getElementById('result');
    resultElement.classList.add('visible');
    document.getElementById('total-price').innerHTML = `–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <span>${finalPrice}</span> ‚ÇΩ`;
    
    const breakdownHTML = breakdown.map(item => `<div>${item}</div>`).join('');
    document.getElementById('price-breakdown').innerHTML = breakdownHTML;
    
    // –ö–æ–¥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å" –∏ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const existingNegotiateText = document.querySelector('.negotiate-text');
    if (existingNegotiateText) existingNegotiateText.remove();
    
    const existingOrderButton = document.querySelector('.order-button');
    if (existingOrderButton) existingOrderButton.remove();

    const negotiateText = document.createElement('div');
    negotiateText.className = 'negotiate-text';
    negotiateText.innerHTML = '–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ü–µ–Ω–∞? –î–∞–≤–∞–π –¥–æ–≥–æ–≤–æ—Ä–∏–º—Å—è üòÑ';
    resultElement.appendChild(negotiateText);
    
    const orderButton = document.createElement('a');
    orderButton.href = 'https://donatty.com/gamelxrd';
    orderButton.target = '_blank';
    orderButton.className = 'order-button negotiate-text';
    orderButton.textContent = '–ó–ê–ö–ê–ó–ê–¢–¨';
    resultElement.appendChild(orderButton);

    setTimeout(() => {
        negotiateText.classList.add('visible');
        orderButton.classList.add('visible');
    }, 500);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∏–≥—Ä—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã)
function determineGameType(game) {
    if (!game || !game.genres) {
        return 'indie'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∞–Ω—Ä—ã –∏ —Ç–µ–≥–∏ –¥–ª—è —Ö–æ—Ä—Ä–æ—Ä–æ–≤
    const genres = game.genres.map(g => g.name.toLowerCase());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    let isHorror = genres.includes('horror') || genres.includes('—É–∂–∞—Å—ã');
    let isCompetitive = false;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏ –∏–∑ RAWG
    if (game.tags && game.tags.length > 0) {
        const tags = game.tags.map(t => t.name.toLowerCase());
        
        if (!isHorror) {
            isHorror = tags.includes('horror') || tags.includes('—É–∂–∞—Å—ã');
        }
        
        isCompetitive = tags.includes('competitive') || tags.includes('—Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π') || 
                        tags.includes('battle royale') || tags.includes('–∫–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞');
    }
    
    if (isHorror) {
        return 'horror';
    }
    
    if (isCompetitive) {
        return 'competitive';
    }
    
    // –°–ø–∏—Å–∫–∏ –∫—Ä—É–ø–Ω—ã—Ö –∏–∑–¥–∞—Ç–µ–ª–µ–π –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    const aaaPublishers = [
        'activision', 'blizzard', 'activision blizzard', 
        'electronic arts', 'ea', 'ea sports',
        'ubisoft', 
        'sony', 'sony interactive entertainment', 'sie', 
        'microsoft', 'xbox game studios', 'xbox',
        'take-two', 'take two', 'take 2', 'rockstar', '2k', '2k games',
        'bethesda', 'zenimax', 
        'capcom', 
        'square enix', 
        'warner bros', 'warner brothers', 'wb games',
        'cd projekt', 'cd projekt red', 
        'fromsoftware', 'from software',
        'nintendo'
    ];
    
    const aaPublishers = [
        'focus entertainment', 'focus home', 
        'saber interactive', 
        'techland', 
        'thq nordic', 'thq', 
        'devolver', 'devolver digital', 
        'paradox', 'paradox interactive', 
        'sega', 
        'bandai namco', 'bandai', 'namco', 
        'koei tecmo', 'koei', 'tecmo', 
        'private division', 
        'humble games', 'humble bundle', 
        'annapurna', 'annapurna interactive',
        '505 games', '505',
        'deep silver'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–¥–∞—Ç–µ–ª–µ–π –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    let isAAAPublisher = false;
    let isAAPublisher = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    if (game.developers && game.developers.length > 0) {
        const developers = game.developers.map(d => d.name.toLowerCase());
        isAAAPublisher = developers.some(dev => aaaPublishers.some(p => dev.includes(p)));
        
        if (!isAAAPublisher) {
            isAAPublisher = developers.some(dev => aaPublishers.some(p => dev.includes(p)));
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–¥–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    if (!isAAAPublisher && !isAAPublisher && game.publishers && game.publishers.length > 0) {
        const publishers = game.publishers.map(p => p.name.toLowerCase());
        isAAAPublisher = publishers.some(pub => aaaPublishers.some(p => pub.includes(p)));
        
        if (!isAAAPublisher) {
            isAAPublisher = publishers.some(pub => aaPublishers.some(p => pub.includes(p)));
        }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    // AAA-–∏–≥—Ä—ã: >5000 –æ—Ü–µ–Ω–æ–∫ –∏–ª–∏ Metacritic ‚â•85 –∏–ª–∏ –∫—Ä—É–ø–Ω—ã–π –∏–∑–¥–∞—Ç–µ–ª—å
    if (isAAAPublisher || game.ratings_count > 5000 || (game.metacritic && game.metacritic >= 85)) {
        return 'aaa';
    }
    
    // AA-–∏–≥—Ä—ã: >1000 –æ—Ü–µ–Ω–æ–∫ –∏–ª–∏ Metacritic ‚â•75 –∏–ª–∏ —Å—Ä–µ–¥–Ω–∏–π –∏–∑–¥–∞—Ç–µ–ª—å
    if (isAAPublisher || game.ratings_count > 1000 || (game.metacritic && game.metacritic >= 75)) {
        return 'aa';
    }
    
    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –∏–Ω–¥–∏
    return 'indie';
}

// –í–∞—à API –∫–ª—é—á RAWG
const RAWG_API_KEY = '683af2661f5b4c07b15a04877441a673'; 

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä
async function searchGames(query) {
    if (query.length < 3) return [];
    
    try {
        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å API, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è
        const apiUrl = `https://api.rawg.io/api/games?key=${RAWG_API_KEY}&search=${encodeURIComponent(query)}&page_size=5`;
        
        // –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å: –º—ã –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ù–ê–®–ï–ô —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–π –Ω—É–∂–Ω—ã–π URL –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
        const proxyUrl = `https://gamelxrd.netlify.app/.netlify/functions/rawg?url=${encodeURIComponent(apiUrl)}`;
        
        const response = await fetch(proxyUrl);
        const data = await response.json();
        
        return data.results || [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä:', error);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ
async function getGameDetails(gameId) {
    try {
        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å API
        const apiUrl = `https://api.rawg.io/api/games/${gameId}?key=${RAWG_API_KEY}&lang=ru`;
        
        // –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å: —Å–Ω–æ–≤–∞ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ù–ê–®–ï–ô —Ñ—É–Ω–∫—Ü–∏–∏
        const proxyUrl = `https://gamelxrd.netlify.app/.netlify/functions/rawg?url=${encodeURIComponent(apiUrl)}`;
        
        const response = await fetch(proxyUrl);
        return await response.json();
    } catch (error)
    {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä—ã:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
function displaySearchResults(games) {
    const resultsContainer = document.getElementById('search-results');
    resultsContainer.innerHTML = '';
    resultsContainer.classList.remove('visible');
    
    if (games.length === 0) {
        resultsContainer.innerHTML = '<div class="no-results">–ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        resultsContainer.style.display = 'block';
        setTimeout(() => {
            resultsContainer.classList.add('visible');
        }, 10);
        return;
    }
    
    games.forEach(game => {
        const gameElement = document.createElement('div');
        gameElement.className = 'game-result';
        gameElement.textContent = game.name;
        gameElement.addEventListener('click', () => selectGame(game));
        resultsContainer.appendChild(gameElement);
    });
    
    resultsContainer.style.display = 'block';
    setTimeout(() => {
        resultsContainer.classList.add('visible');
    }, 10);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
let lastSelectedGame = null;
// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤ –∏–≥—Ä—ã
let originalGameTags = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
async function selectGame(game) {
    document.getElementById('game-search').value = game.name;
    document.getElementById('search-results').style.display = 'none';
    
    const gameDetails = await getGameDetails(game.id);
    
    if (gameDetails) {
        lastSelectedGame = gameDetails;
        cacheGame(gameDetails);
        console.log('–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã RAWG:', gameDetails);
        
        const gamePriceInput = document.getElementById('game-price');
        gamePriceInput.value = 0;

        // --- "–°–£–ü–ï–† –ü–õ–ê–ù –ë": –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –¶–ï–ù–´ ---
        let steamAppId = null;
        if (gameDetails.stores) {
            const steamStore = gameDetails.stores.find(store => store.store && store.store.slug === 'steam');
            if (steamStore && steamStore.url) {
                const match = steamStore.url.match(/app\/(\d+)/);
                if (match) {
                    steamAppId = match[1];
                }
            }
        }
        
        let proxyUrl = 'https://gamelxrd.netlify.app/.netlify/functions/rawg?';
        let queryParams = '';

        // –ü–ª–∞–Ω –ê: –µ—Å–ª–∏ –µ—Å—Ç—å Steam App ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (—Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π –º–µ—Ç–æ–¥)
        if (steamAppId) {
            console.log(`–ü–ª–∞–Ω –ê: –ù–∞–π–¥–µ–Ω Steam App ID (${steamAppId}). –ò—â–µ–º –ø–æ –Ω–µ–º—É.`);
            queryParams = `steamAppId=${steamAppId}`;
        } 
        // –°—É–ø–µ—Ä –ü–ª–∞–Ω –ë: –µ—Å–ª–∏ ID –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ + –≥–æ–¥ —Ä–µ–ª–∏–∑–∞
        else {
            let searchName = game.name;
            // –£—Ç–æ—á–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã, –¥–æ–±–∞–≤–ª—è—è –≥–æ–¥ —Ä–µ–ª–∏–∑–∞
            if (gameDetails.released) {
                const releaseYear = gameDetails.released.substring(0, 4);
                // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                if (!searchName.includes(releaseYear)) {
                    searchName = `${searchName} (${releaseYear})`;
                }
            }
            console.log(`–ü–ª–∞–Ω –ë: Steam App ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—â–µ–º –ø–æ —É—Ç–æ—á–Ω–µ–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é "${searchName}".`);
            queryParams = `gameName=${encodeURIComponent(searchName)}`;
        }
        
        try {
            const response = await fetch(proxyUrl + queryParams);
            const data = await response.json();
            
            if (data.price > 0) {
                console.log(`–£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–∞ –∏ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Ü–µ–Ω–∞: ${data.price} ‚ÇΩ`);
                gamePriceInput.value = data.price;
            } else {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É —á–µ—Ä–µ–∑ ITAD, –ª–∏–±–æ –∏–≥—Ä–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞.');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã:', error);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É –∏–≥—Ä—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const coverContainer = document.getElementById('cover-container');
        const gameCover = document.getElementById('game-cover');
        
        gameCover.src = gameDetails.background_image || 'placeholder.png';
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        gameCover.onerror = function() {
            this.src = 'placeholder.png';
        };
        coverContainer.style.display = 'block';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        setTimeout(() => {
            coverContainer.classList.add('visible');
        }, 50);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        const descriptionElement = document.getElementById('game-description');
        const description = gameDetails.description_raw || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const maxLength = isMobileDevice() ? 100 : 280;
        
        const shortDescription = description.length > maxLength 
            ? description.substring(0, maxLength) + '...' 
            : description;
        
        descriptionElement.innerHTML = shortDescription;
        descriptionElement.style.display = 'block';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        setTimeout(() => {
            descriptionElement.classList.add('visible');
        }, 150);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –∂–∞–Ω—Ä–æ–≤ (—Å–∫—Ä—ã—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        const gameType = determineGameType(gameDetails);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ RAWG
        let playtime = 6; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if (gameDetails.playtime && gameDetails.playtime > 0) {
            playtime = gameDetails.playtime;
            console.log('–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏–∑ RAWG:', playtime);
        }
        
        document.getElementById('game-length').value = playtime;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ HowLongToBeat
        const hltbLink = document.getElementById('hltb-link');
        const hltbSearchUrl = `https://howlongtobeat.com/?q=${encodeURIComponent(game.name)}`;
        hltbLink.href = hltbSearchUrl;
        hltbLink.style.display = 'inline-flex';

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        if (!hltbLink.querySelector('.hltb-tooltip')) {
            const tooltip = document.createElement('div');
            tooltip.className = 'hltb-tooltip';
            tooltip.textContent = '–ü—Ä–æ–≤–µ—Ä—å –≤—Ä–µ–º—è –∑–¥–µ—Å—å';
            hltbLink.appendChild(tooltip);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        setTimeout(() => {
            hltbLink.classList.add('visible');
        }, 200); // –ó–∞–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–µ, —á–µ–º —É –æ–±–ª–æ–∂–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–∞—Å–∫–∞–¥–∞

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        hltbLink.addEventListener('click', function() {
            const tooltip = this.querySelector('.hltb-tooltip');
            if (tooltip) {
                tooltip.style.opacity = '0';
                tooltip.style.visibility = 'hidden';
            }
        }, { once: true }); // –ò—Å–ø–æ–ª—å–∑—É–µ–º { once: true }, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        
        // --- –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ù–û–ü–ö–£ STEAM ---
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Steam
        const steamLink = document.getElementById('steam-link') || document.createElement('a');
        steamLink.id = 'steam-link';
        steamLink.textContent = 'STEAM';
        steamLink.className = 'steam-link'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–µ–π
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Steam –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
        let steamUrl = `https://store.steampowered.com/search/?term=${encodeURIComponent(game.name)}`;
        if (gameDetails.stores && gameDetails.stores.length > 0) {
            // –ò—â–µ–º –º–∞–≥–∞–∑–∏–Ω Steam –≤ —Å–ø–∏—Å–∫–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            const steamStore = gameDetails.stores.find(store => 
                store.store && (store.store.id === 1 || store.store.name.toLowerCase() === 'steam'));
            
            if (steamStore && steamStore.url) {
                steamUrl = steamStore.url;
            }
        }
        
        steamLink.href = steamUrl;
        steamLink.target = '_blank';
        steamLink.style.display = 'inline-flex';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
        const searchContainer = document.querySelector('.search-input-container');
        if (!document.getElementById('steam-link')) {
            searchContainer.appendChild(steamLink);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        setTimeout(() => {
            steamLink.classList.add('visible');
        }, 250); // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—É—Ç—å –±–æ–ª—å—à–µ, —á–µ–º —É HLTB –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–∞—Å–∫–∞–¥–∞
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∂–∞–Ω—Ä—ã
        const genres = gameDetails.genres.map(g => g.name).join(', ');
        document.getElementById('game-genres').value = genres;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–≥–∏
        if (gameDetails.tags && gameDetails.tags.length > 0) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
            originalGameTags = [...gameDetails.tags];
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–≥–∏
            displayTags(gameDetails.tags);
        } else {
            // –û—á–∏—â–∞–µ–º —Ç–µ–≥–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            clearTags();
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Metacritic
        const metacriticValue = gameDetails.metacritic || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        document.getElementById('game-metacritic').value = metacriticValue;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ RAWG rating
        const ratingElement = document.getElementById('game-rating');
        if (gameDetails.rating) {
            const rating = gameDetails.rating.toFixed(1);
            ratingElement.value = `${rating}`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –≥—Ä–∞–¥–∞—Ü–∏—é
            ratingElement.classList.remove('rating-low', 'rating-medium', 'rating-high');
            
            if (rating < 3.0) {
                ratingElement.classList.add('rating-low');
            } else if (rating < 4.0) {
                ratingElement.classList.add('rating-medium');
            } else {
                ratingElement.classList.add('rating-high');
            }
        } else {
            ratingElement.value = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
            ratingElement.classList.remove('rating-low', 'rating-medium', 'rating-high');
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–≥–æ–≤
let showAllTags = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–≥–æ–≤
function displayTags(tags) {
    const tagsContainer = document.getElementById('tags-list');
    tagsContainer.innerHTML = '';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Ç–µ–≥–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    const maxVisibleTags = showAllTags ? tags.length : 5;
    const displayTags = tags.slice(0, maxVisibleTags);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ Horror —Ç–µ–≥ –¥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤
    const hadHorrorTag = lastSelectedGame && lastSelectedGame.tags && 
        lastSelectedGame.tags.some(t => t.name.toLowerCase() === 'horror' || t.name.toLowerCase() === '—É–∂–∞—Å—ã');
    
    displayTags.forEach(tag => {
        const tagElement = document.createElement('div');
        tagElement.className = 'tag';
        tagElement.textContent = tag.name;
        tagElement.dataset.id = tag.id;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–≥ —Ö–æ—Ä—Ä–æ—Ä–æ–º
        const isHorrorTag = tag.name.toLowerCase() === 'horror' || tag.name.toLowerCase() === '—É–∂–∞—Å—ã';
        if (isHorrorTag) {
            tagElement.classList.add('horror-tag');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞
        tagElement.addEventListener('click', function() {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –±—ã–ª –ª–∏ —ç—Ç–æ —Ç–µ–≥ Horror
            const isHorrorTag = tag.name.toLowerCase() === 'horror' || tag.name.toLowerCase() === '—É–∂–∞—Å—ã';
            this.remove();
            // –û–±–Ω–æ–≤–ª—è–µ–º lastSelectedGame.tags, —É–¥–∞–ª—è—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–≥
            if (lastSelectedGame && lastSelectedGame.tags) {
                const tagId = parseInt(this.dataset.id);
                lastSelectedGame.tags = lastSelectedGame.tags.filter(t => t.id !== tagId);

                // –ï—Å–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω —Ç–µ–≥ Horror –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
                if (isHorrorTag && document.getElementById('result').classList.contains('visible')) {
                    calculatePrice();
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
                if (!showAllTags && lastSelectedGame.tags.length > document.querySelectorAll('.tag').length) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞
                    displayNextAvailableTag();
                }
            }
        });
        
        tagsContainer.appendChild(tagElement);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ Horror —Ç–µ–≥ –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤
    const hasHorrorTag = Array.from(document.querySelectorAll('.tag')).some(
        tag => tag.textContent.toLowerCase() === 'horror' || tag.textContent.toLowerCase() === '—É–∂–∞—Å—ã'
    );
    
    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å Horror —Ç–µ–≥–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ showAllTags, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç —Ä–∞–±–æ—Ç–∞–ª –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (hadHorrorTag !== hasHorrorTag && document.getElementById('result').classList.contains('visible')) {
        calculatePrice();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤
    updateToggleTagsButton();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–µ–≥–∞
function displayNextAvailableTag() {
    if (!lastSelectedGame || !lastSelectedGame.tags) return;
    
    const tagsContainer = document.getElementById('tags-list');
    const visibleTagIds = Array.from(document.querySelectorAll('.tag')).map(el => parseInt(el.dataset.id));
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    const nextTag = lastSelectedGame.tags.find(t => !visibleTagIds.includes(t.id));
    
    if (nextTag) {
        const tagElement = document.createElement('div');
        tagElement.className = 'tag';
        tagElement.textContent = nextTag.name;
        tagElement.dataset.id = nextTag.id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–≥ —Ö–æ—Ä—Ä–æ—Ä–æ–º
        const isHorrorTag = nextTag.name.toLowerCase() === 'horror' || nextTag.name.toLowerCase() === '—É–∂–∞—Å—ã';
        if (isHorrorTag) {
            tagElement.classList.add('horror-tag');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞
        tagElement.addEventListener('click', function() {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –±—ã–ª –ª–∏ —ç—Ç–æ —Ç–µ–≥ Horror
            const isHorrorTag = nextTag.name.toLowerCase() === 'horror' || nextTag.name.toLowerCase() === '—É–∂–∞—Å—ã';
            this.remove();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º lastSelectedGame.tags, —É–¥–∞–ª—è—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–≥
            if (lastSelectedGame && lastSelectedGame.tags) {
                const tagId = parseInt(this.dataset.id);
                lastSelectedGame.tags = lastSelectedGame.tags.filter(t => t.id !== tagId);
                
                // –ï—Å–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω —Ç–µ–≥ Horror –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
                if (isHorrorTag && document.getElementById('result').classList.contains('visible')) {
                    calculatePrice();
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å
                if (!showAllTags && lastSelectedGame.tags.length > document.querySelectorAll('.tag').length) {
                    displayNextAvailableTag();
                }
            }
        });
        
        tagsContainer.appendChild(tagElement);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤
function updateToggleTagsButton() {
    const toggleButton = document.getElementById('toggle-tags');
    if (toggleButton) {
        if (showAllTags) {
            toggleButton.title = "–°–∫—Ä—ã—Ç—å —Ç–µ–≥–∏";
            toggleButton.textContent = "‚àí";
            toggleButton.classList.add('active');
        } else {
            toggleButton.title = "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–≥–∏";
            toggleButton.textContent = "‚ãØ";
            toggleButton.classList.remove('active');
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
function toggleAllTags() {
    showAllTags = !showAllTags;
    
    // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ —Å —Ç–µ–≥–∞–º–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (lastSelectedGame && lastSelectedGame.tags) {
        displayTags(lastSelectedGame.tags);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–≥–æ–≤
function clearTags() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–∞ Horror –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    const hadHorrorTag = Array.from(document.querySelectorAll('.tag')).some(
        tag => tag.textContent.toLowerCase() === 'horror' || tag.textContent.toLowerCase() === '—É–∂–∞—Å—ã'
    );
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–µ–≥–æ–≤
    const tagsContainer = document.getElementById('tags-list');
    tagsContainer.innerHTML = '';
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
    if (lastSelectedGame && originalGameTags.length > 0) {
        lastSelectedGame.tags = [...originalGameTags];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ —Ç–µ–≥ Horror –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        const hasHorrorTag = originalGameTags.some(
            tag => tag.name.toLowerCase() === 'horror' || tag.name.toLowerCase() === '—É–∂–∞—Å—ã'
        );
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
        displayTags(originalGameTags);
        
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ç–µ–≥–∞ Horror –∏–∑–º–µ–Ω–∏–ª—Å—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç
        if (hadHorrorTag !== hasHorrorTag && document.getElementById('result').classList.contains('visible')) {
            calculatePrice();
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤
    updateToggleTagsButton();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–µ–≥–æ–≤ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º
function resetTags() {
    if (originalGameTags.length > 0) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –≤ lastSelectedGame
        if (lastSelectedGame) {
            lastSelectedGame.tags = [...originalGameTags];
        }
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
        displayTags(originalGameTags);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–æ–≤ (debounce)
function debounce(func, delay) {
    let timeout;
    return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), delay);
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä—ã
async function displayGameDetails(gameId) {
    // –ó–∞–º–µ–Ω—è–µ–º fetchGameDetails –Ω–∞ getGameDetails
    const gameDetails = await getGameDetails(gameId);
    
    if (gameDetails) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã
        lastSelectedGame = gameDetails;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É –∏–≥—Ä—ã
        const coverContainer = document.getElementById('cover-container');
        const gameCover = document.getElementById('game-cover');
        
        if (gameDetails.background_image) {
            gameCover.src = gameDetails.background_image;
            coverContainer.style.display = 'block';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            setTimeout(() => {
                coverContainer.classList.add('visible');
            }, 50);
        } else {
            gameCover.src = 'placeholder.png';
            coverContainer.style.display = 'block';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            setTimeout(() => {
                coverContainer.classList.add('visible');
            }, 50);
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã
        const descriptionElement = document.getElementById('game-description');
        if (gameDetails.description_raw) {
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
            const maxLength = 300;
            let description = gameDetails.description_raw;
            
            if (description.length > maxLength) {
                description = description.substring(0, maxLength) + '...';
            }
            
            descriptionElement.textContent = description;
            descriptionElement.style.display = 'block';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            setTimeout(() => {
                descriptionElement.classList.add('visible');
            }, 150); // –ó–∞–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–µ, —á–µ–º —É –æ–±–ª–æ–∂–∫–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–∞—Å–∫–∞–¥–∞
        } else {
            descriptionElement.textContent = '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
            descriptionElement.style.display = 'block';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            setTimeout(() => {
                descriptionElement.classList.add('visible');
            }, 150);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∂–∞–Ω—Ä—ã
        const genres = gameDetails.genres.map(g => g.name).join(', ');
        document.getElementById('game-genres').value = genres;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–≥–∏
        if (gameDetails.tags && gameDetails.tags.length > 0) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
            originalGameTags = [...gameDetails.tags];
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–≥–∏
            displayTags(gameDetails.tags);
        } else {
            // –û—á–∏—â–∞–µ–º —Ç–µ–≥–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            clearTags();
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Metacritic
        const metacriticValue = gameDetails.metacritic || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        document.getElementById('game-metacritic').value = metacriticValue;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
        const rating = gameDetails.metacritic ? `${gameDetails.metacritic}/100` : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        document.getElementById('game-rating').value = rating;
    }
}

// –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä—ã –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ
function clearGameDetails() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –Ω–∏–º
    const coverContainer = document.getElementById('cover-container');
    const gameDescription = document.getElementById('game-description');
    const hltbLink = document.getElementById('hltb-link');
    if (hltbLink) {
        const tooltip = hltbLink.querySelector('.hltb-tooltip');
        if (tooltip) {
            tooltip.remove();
        }
        hltbLink.classList.remove('visible');
    }
    
    if (coverContainer) coverContainer.classList.remove('visible');
    if (gameDescription) gameDescription.classList.remove('visible');
    if (hltbLink) hltbLink.classList.remove('visible');
    
    // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        if (coverContainer) coverContainer.style.display = 'none';
        if (gameDescription) gameDescription.style.display = 'none';
        if (hltbLink) hltbLink.style.display = 'none';
    }, 300);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
    const gameGenres = document.getElementById('game-genres');
    const gameRating = document.getElementById('game-rating');
    
    if (gameGenres) gameGenres.value = '';
    if (gameRating) gameRating.value = '';

    // –û—á–∏—â–∞–µ–º —Ç–µ–≥–∏
    clearTags();
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
    originalGameTags = [];
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
document.addEventListener('DOMContentLoaded', function() {
    // --- –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
    const searchInput = document.getElementById('game-search');
    const gameLengthInput = document.getElementById('game-length');
    const gamePriceInput = document.getElementById('game-price'); 
    const resetTagsButton = document.getElementById('reset-tags');
    const toggleTagsButton = document.getElementById('toggle-tags');
    const resultsContainer = document.getElementById('search-results');
    const loaderContainer = document.getElementById('loader-container');

    // --- –ù–∞–∑–Ω–∞—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---

    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–≥–æ–≤
    if (resetTagsButton) {
        resetTagsButton.addEventListener('click', resetTags);
    }
    if (toggleTagsButton) {
        toggleTagsButton.addEventListener('click', toggleAllTags);
    }
    
    // –ü–µ—Ä–µ—Å—á–µ—Ç —Ü–µ–Ω—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–ò
    if (gameLengthInput) {
        gameLengthInput.addEventListener('input', function() {
            if (lastSelectedGame && document.getElementById('result').classList.contains('visible')) {
                calculatePrice();
            }
        });
    }

    // –ü–µ—Ä–µ—Å—á–µ—Ç —Ü–µ–Ω—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¶–ï–ù–´ –ò–ì–†–´ (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)
    if (gamePriceInput) {
        gamePriceInput.addEventListener('input', function() {
            if (document.getElementById('result').classList.contains('visible')) {
                calculatePrice();
            }
        });
    }
    
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
    if (searchInput) {
        // –ü–æ–∏—Å–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏ –≤–≤–æ–¥–µ
        searchInput.addEventListener('input', debounce(async function(e) {
            const query = e.target.value.trim();
            document.getElementById('result').classList.remove('visible');
            clearGameDetails();
            
            if (query.length < 3) {
                resultsContainer.style.display = 'none';
                loaderContainer.style.display = 'none';
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –∏–≥—Ä—ã, –µ—Å–ª–∏ –ø–æ–ª–µ –æ—á–∏—Å—Ç–∏–ª–∏
                showRecentGamesDropdown();
                return;
            }
            
            resultsContainer.style.display = 'none';
            loaderContainer.style.display = 'block';
            
            const games = await searchGames(query);
            
            loaderContainer.style.display = 'none';
            displaySearchResults(games);
        }, 300));

        // –ü–æ–∫–∞–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–≥—Ä –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
        searchInput.addEventListener('focus', function() {
            if (this.value.trim() === '') {
                showRecentGamesDropdown();
            }
        });

        // –°–±—Ä–æ—Å –≤—Å–µ–≥–æ, –µ—Å–ª–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏–ª–∏
        searchInput.addEventListener('input', function() {
            if (this.value.trim() === '') {
                resetAllFields();
            }
        });
    }

    // –°–∫—Ä—ã—Ç–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–ª—è
    document.addEventListener('click', function(e) {
        if (e.target !== searchInput && !e.target.closest('.search-results')) {
            resultsContainer.style.display = 'none';
            resultsContainer.classList.remove('visible');
        }
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω—ã–º
function isMobileDevice() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞ (–º–µ–Ω–µ–µ 768px –æ–±—ã—á–Ω–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –º–æ–±–∏–ª—å–Ω—ã–º)
    const isMobileWidth = window.innerWidth < 768;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º User-Agent –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const isMobileAgent = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    
    // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –º–æ–±–∏–ª—å–Ω—ã–º, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π
    return isMobileWidth || isMobileAgent;
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', function() {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∏–≥—Ä–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if (lastSelectedGame && lastSelectedGame.description_raw) {
        const descriptionElement = document.getElementById('game-description');
        const description = lastSelectedGame.description_raw || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const maxLength = isMobileDevice() ? 100 : 280;
        
        const shortDescription = description.length > maxLength 
            ? description.substring(0, maxLength) + '...' 
            : description;
        
        descriptionElement.innerHTML = shortDescription;
    }
});


function resetAllFields() {
    lastSelectedGame = null;
    originalGameTags = [];

    // –°–∫—Ä—ã—Ç—å –æ–±–ª–æ–∂–∫—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    const coverContainer = document.getElementById('cover-container');
    if (coverContainer) {
        coverContainer.classList.remove('visible');
        setTimeout(() => { coverContainer.style.display = 'none'; }, 300);
    }
    const descriptionElement = document.getElementById('game-description');
    if (descriptionElement) {
        descriptionElement.classList.remove('visible');
        setTimeout(() => { descriptionElement.style.display = 'none'; }, 300);
    }
    const hltbLink = document.getElementById('hltb-link');
    if (hltbLink) {
        hltbLink.classList.remove('visible');
        setTimeout(() => { hltbLink.style.display = 'none'; }, 300);
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Steam
    const steamLink = document.getElementById('steam-link');
    if (steamLink) {
        steamLink.classList.remove('visible');
        setTimeout(() => { steamLink.style.display = 'none'; }, 300);
    }

    // –°–±—Ä–æ—Å–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
    const lengthInput = document.getElementById('game-length');
    if (lengthInput) lengthInput.value = '6';
    const genresInput = document.getElementById('game-genres');
    if (genresInput) genresInput.value = '';
    const metacriticInput = document.getElementById('game-metacritic');
    if (metacriticInput) metacriticInput.value = '';
    const ratingElement = document.getElementById('game-rating');
    if (ratingElement) {
        ratingElement.value = '';
        ratingElement.classList.remove('rating-low', 'rating-medium', 'rating-high');
    }

    // –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–≥–∏
    clearTags && clearTags();

    // –°–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const resultElement = document.getElementById('result');
    if (resultElement && resultElement.classList.contains('visible')) {
        resultElement.classList.remove('visible');
    }
}

// –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ –≤ localStorage
const RECENT_GAMES_KEY = 'recentGames';
const RECENT_GAMES_LIMIT = 4;

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –≤ –∫–µ—à
function cacheGame(game) {
    let recentGames = JSON.parse(localStorage.getItem(RECENT_GAMES_KEY)) || [];
    // –£–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–∞—è –∏–≥—Ä–∞
    recentGames = recentGames.filter(g => g.id !== game.id);
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
    recentGames.unshift({
        id: game.id,
        name: game.name,
        background_image: game.background_image || '',
        rating: game.rating || null
    });
    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ª–∏–º–∏—Ç–∞
    if (recentGames.length > RECENT_GAMES_LIMIT) {
        recentGames = recentGames.slice(0, RECENT_GAMES_LIMIT);
    }
    localStorage.setItem(RECENT_GAMES_KEY, JSON.stringify(recentGames));
}

// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã –∏–∑ –∫–µ—à–∞
function getRecentGames() {
    return JSON.parse(localStorage.getItem(RECENT_GAMES_KEY)) || [];
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä
function showRecentGamesDropdown() {
    const recentGames = getRecentGames();
    const resultsContainer = document.getElementById('search-results');
    resultsContainer.innerHTML = '';
    if (recentGames.length === 0) return;
    recentGames.forEach(game => {
        const gameElement = document.createElement('div');
        gameElement.className = 'game-result recent-game';
        gameElement.textContent = game.name + (game.rating ? ` (${game.rating})` : '');
        gameElement.addEventListener('click', () => {
            selectGame(game);
            resultsContainer.style.display = 'none';
        });
        resultsContainer.appendChild(gameElement);
    });
    resultsContainer.style.display = 'block';
    setTimeout(() => {
        resultsContainer.classList.add('visible');
    }, 10);
}
